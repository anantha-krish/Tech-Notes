{"_id":"note:-FLbGIBHp","title":"Advanced JS Concepts","content":"\nIn JS everything is object, except the primitive data types\n\n## Inheritance\n\nPrototype & prototype chain\n\nthe js first search  a method in its own object, otherwise it will search on prototype.\n\n\nEver js object has prototype.\n\nObject can define some properties & methods in prototype, so that other objects can also inherit them.\n\n```js\n//Function constructor\nvar Person = function(name,lastName,year){\n  this.name = name\n  this.lastName = lastName\n  this.year = year\n}\n\n//Prototype\nPerson.prototype.calculateAge = function()\n{\n    console.log( 2020 - this.year)\n}\n\nvar john = new Person('John','Smith',1988)\nvar mark = new Person('Mark','Smith',1995)\njohn.calculateAge()\nmark.calculateAge()\n```\n\n__proto__ in instance\n\n```js\nPerson {name: \"John\", job: \"teacher\", year: 1988}\njob: \"teacher\"\nname: \"John\"\nyear: 1988\n__proto__:\ncalculateAge: ƒ ()\nlastName: \"Smith\"\nconstructor: ƒ (name,year,job)\n__proto__: Object   \\\\ prototype chain\n\n```\nExample:\nArray is also an object\n```js\nvar x = [10,20,30]\nconsole.info(x)\n\n0: 10\n1: 20\n2: 30\nlength: 3\n__proto__: Array(0)\nconcat: ƒ concat()\nconstructor: ƒ Array()\ncopyWithin: ƒ copyWithin()\nfind: ƒ find()\nforEach: ƒ forEach()\nincludes: ƒ includes()\nindexOf: ƒ indexOf()\njoin: ƒ join()\nkeys: ƒ keys()\nlastIndexOf: ƒ lastIndexOf()\nlength: 0\nmap: ƒ map()\npop: ƒ pop()\npush: ƒ push()\n\n```\n\n## Object Creation (Another method)\n\n Object.create() is used when you have to implement complex prototypes\n \n```js\nvar personProto = {\n  calculateAge: function () {\n    console.log(2020 - this.year);\n  }\n};\n\nvar john = Object.create(personProto);\njohn.name ='John';\njohn.year = 1995;\njohn.calculateAge();\n\n//output\n{name: \"John\", year: 1995}\n\nname: \"John\"\nyear: 1995\n__proto__:\n    calculateAge: ƒ ()\n    __proto__: Object\n```\n## Primitive vs Object\n\n- Primitive: While copying or passing to function, it creates a new copy of right hand side (a new memory Location).\n- Object: While copying or passing to function, it creates a new reference to same memory location.\n\n```js\n// Primitives\nvar a = 23;\nvar b = a;  //<- New memory location with same value of a\na = 46;\nconsole.log(a);  // 46\nconsole.log(b);  // 23 (updated value is not reflected)\n\n\n\n// Objects\nvar obj1 = {\n    name: 'John',\n    age: 26\n};\nvar obj2 = obj1;  // <- A new reference to same memory location\nobj1.age = 30;\nconsole.log(obj1.age);  //30\nconsole.log(obj2.age);  //30 (updated value is reflected here)\n\n// Functions\nvar age = 27;\nvar obj = {\n    name: 'Jonas',\n    city: 'Lisbon'\n};\n\nfunction change(a, b) {\n    a = 30;\n    b.city = 'San Francisco';\n}\n\nchange(age, obj);\n\nconsole.log(age);  //27\nconsole.log(obj.city); //San francisco  (as it was a object)\n\n```\n\n\n## Passing Functions as an argument\ndynamically processs data differently functionality based on argument\n\n```js\nvar years = [1990,1995, 2005,1988]\n\nfunction calcArray(arr, fn){\n   var newArr = []\n   for (var i = 0; i < arr.length ; i++)\n   {\n     newArr.push(fn(arr[i]));\n   } \n   return newArr;\n}\n\nfunction calcAge(el)\n{\n   return 2020 - el\n}\n\nfunction heartRate(el)\n{\n  if(el >= 18 && el < 60)\n  return Math.round(206.9 - (.67 * el))\n  else\n  return -1\n}\n\nvar ages = calcArray(years,calcAge)\nconsole.log(ages)\n\nvar heartRates = calcArray(ages,heartRate)\nconsole.log(heartRates)\n```\n## Functions returning function\ndynamically return different functionality based on argument\n```js\nfunction interviewQn(job)\n{\n  if(job === 'teacher')\n  return function(name){\n  console.log('Hi '+name+', what subjects do you teach ? ');\n  }\n\n  else if(job ==='designer')\n  return function(name){\n    console.log('Hi '+name+', what technology you are comfortable ? ');\n  }\n} \n\nvar teacherInterview = interviewQn('teacher')\nteacherInterview('John')\n\nvar designerInterview = interviewQn('designer')\ndesignerInterview('Mark')\n```\n\n## Immediately Invoked Function Expression (IIFE)\n\nSometimes for data privacy we may need to another create a function for new local variable inside function scope and call it immediately \n\nThis approach can be replaced by using IIFE approach\nSyntax: \n\n``(function(args){ \\\\ logic })(args)``\n'()' parantheses lets interpreter know that its not a function declaration\nbut an expression.\n\nExample:\n\n```js\n(function () {\n  var score = Math.random() * 10;\n  console.log(score >= 5);\n})();\n\nconsole.log(score);  // <- not acessible undefined error\n\n\n(function (goodLuck) {\n  var score = Math.random() * 10;\n  console.log(score >= 5 - goodLuck);\n})(5);\n\n```\n\n## Closures\n\nAn inner function has always access to variables and outer function,\neven after the outer function has been returned.\n\n```js\nfunction retirement(retirementAge)\n{\n  var a =\" years left until retirement\"\n   return function(year)\n   {      // function has still access\n       //to outer variable (a,retirementAge) due to closure\n        var age = (2020) - year\n\n        if(age <retirementAge)\n        {\n          console.log (age + a)  \n        }\n        else\n        {\n          console.log('retired..')\n        }\n   }\n\n}\n\nvar retirementUS = retirement(65)\nretirementUS(1990)\nvar retirementGermany = retirement(67)\nretirementGermany(1990)\n```\n\n\n## Bind, Apply, Call\n\n- call, apply is used when we need to use method of another object\n\n- The first argument is `this`, where we pass the object to be replaced.\n\n- Only difference is in apply we need to pass arguments in an array\n- Bind is used when you need to use a copy of method , with a default argument.\n\n\n```js\nvar john = {\n  name : 'John',\n  age:20,\n  job: 'teacher',\n  presentation : function(style,timesOfDay)\n  {\n    if(style === 'formal')\n    {\n      console.log('Good '+timesOfDay+' , Ladies & Gentlemen ! I\\'m ' + this.name +' & I\\'m a '+this.job)\n    }\n    else if(style === 'friendly')\n    {\n      console.log('Good '+timesOfDay+' , Guys ! I\\'m ' + this.name +' & I\\'m a '+this.job)\n    }\n  }\n}\n\njohn.presentation('formal','morning')\n\nvar mary = {\n  name : 'mary',\n  age:20,\n  job: 'designer',\n}\n\njohn.presentation.call(mary,'friendly','morning')\n\njohn.presentation.apply(mary,['friendly','morning'])\n\n\nvar maryPresentation = john.presentation.bind(mary,'friendly')\nmaryPresentation('morning')\n\n```\n\nExample 2\n\n```js\nvar years = [1990,1995, 2005,1988]\n\nfunction calcArray(arr, fn){\n   var newArr = []\n   for (var i = 0; i < arr.length ; i++)\n   {\n     newArr.push(fn(arr[i]));\n   } \n   return newArr;\n}\nfunction getAge (el)\n{\n  return 2020-el;\n}\n\nfunction isAdult(limit,el)\n{\n   return  limit < el;\n}\n\nvar ages = calcArray(years,getAge)\nconsole.log(ages);\n                    // bind was use to set an limit for adult age\nvar checkAdultInJapan = calcArray(ages,isAdult.bind(this,20));\nconsole.log(checkAdultInJapan);\n```\n","tags":[],"folderPathname":"/","data":{},"createdAt":"2020-10-08T08:34:37.584Z","updatedAt":"2020-10-10T03:20:04.473Z","trashed":false,"_rev":"nZ6EjJHNd"}