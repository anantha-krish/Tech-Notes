{"_id":"note:LKOWnqJt4","title":"React Redux Notes","content":"Author: Anantha Krishnan\n\n# Basic react redux setup\nCreating project, execute cmds\n\n```shell\nnpx create-react-app react-redux-demo\n\nnpm add redux react-redux\n```\n\n### Vs extension\n\nES7 React/Redux/GraphQL snippets\n\ntype rfc to create functional component\n\nNote: creating action & dispatch is similar refer redux Notes.\n\n## Store\n\nExample:\n```js\nimport {createStore} from 'redux';\nimport cakeReducer from './CakeReducer';\n\nconst store = createStore(cakeReducer)\nexport default store;\n```\nThen use Provider in App.js\n\n```js\nimport { Provider } from \"react-redux\";\nimport CakeContainer from \"./components/CakeContainer\";\nimport store from \"./redux/cakes/CakeStore\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <CakeContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n\n```\n\n## Connecting App with redux\nThe redux states & dispatch is passed as props\n\n```js\nimport React from 'react'\nimport { buyCake } from '../redux/cakes/CakeActions'\nimport { connect } from 'react-redux'\n\nfunction CakeContainer(props) {\n    return (\n        <div>   \n            <h2>Number of Cake{props.numberOfCakes}</h2>\n            <button onClick={props.buyCake}>Buy Cake</button>     \n        </div>\n    )\n}\n//Pass redux state as props\nconst mapStateToProps = state => {\n    return {\n        numberOfCakes : state.numberOfCakes\n    }\n}\n//Pass redux dispatch as props\nconst mapDispatchToProps = dispatch => {\n    return {\n        buyCake :()=> dispatch(buyCake())\n    }\n}\n\n// use connect statement\nexport default connect(mapStateToProps,mapDispatchToProps) (CakeContainer)\n\n```\n\n# Redux with Hooks (shorter code)\nWith hooks, you can reduce the lines of code.\nthere is no need of connect stmnt.\n\n## useSelector\n\n\n```js\nimport { useSelector } from 'react-redux'\n\nfunction HooksCakeContainer() {\n     \t\t\t\t\t\t//used instead of mapStateToProps\n    const numberOfCakes = useSelector(state=>state.numberOfCakes)\n    return (\n        <div>\n               <h2>Number of Cake{numberOfCakes}</h2>\n```\n\n\n## useDispatch\n\n```js\nimport React from 'react'\nimport { useSelector,useDispatch } from 'react-redux'\nimport { buyCake } from '../redux/cakes/CakeActions';\n\nfunction HooksCakeContainer() {\n\n    const numberOfCakes = useSelector(state=>state.numberOfCakes)\n   //used instead of mapDispatchToProps\n    const dispatch = useDispatch();\n    return (\n        <div>\n               <h2>Number of Cake{numberOfCakes}</h2>\n            <button onClick={()=>dispatch(buyCake())}>Buy Cake</button>     \n        </div>\n    )\n}\n\nexport default HooksCakeContainer\n\n```\n\nIt's okay to use Hooks as it provides shorter codes, but there are some usage  <b>WARNINGS</b>, do check out the document.\n\n## combining reducers in react\n\nstep1: add a root reducer as follow & pass it to createStore(). \n\n```js\n\nimport {combineReducers}  from \"redux\";\nimport cakeReducer from \"./cakes/CakeReducer\";\nimport iceCreamReducer from \"./ice-creams/IceCreamReducer\";\n\nconst rootReducers = combineReducers({\n    cake: cakeReducer,\n    iceCream: iceCreamReducer\n})\n\nexport default rootReducers;\n\n```\n\nafter this you need to access the states differently.\n\nstate.cake.numberOfCakes   // related to cake\nstate.iceCream.numberOfIceCreams  // related to ice creams\n\n\n## Install Redux devtools\n\nStep1: add redux tool extension\n``\nnpm install --save redux-devtools-extension\n``\n\nStep2: modify store.js\n```js\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nimport rootReducers from './rootReducer';\nconst store = createStore(rootReducers,composeWithDevTools(applyMiddleware(logger)))\n```\n\nStep3: Install Redux devtools chrome extension\n\nBenefits of devtools: you can see the state of app at any given time, the actions performed, you can even dispatch an action, without ui support.\n\n## Action PayLoad\n\nUse this approach when you have to do variable action.\n\nStep1: introduce a state variable\n\n```js\n  const [number,setNumber] = useState(1);\n```\n\nStep2: modify onClick event\n\n```js\n <button onClick={() => dispatch(buyCake(number))}>Buy {number} Cakes </button>   \n```\n\nStep 3: modify action creater to accept number\n\n```js\n\t\t\t\t\t// set number = 1 if undefined or null\nexport const buyCake = (number = 1) => \n{\n    return {\n        type:  BUY_CAKE,\n        //payload is the convention\n        payload: number\n    }\n}\n```\n\nstep 4: update the reducer fn\n\n```js\n\nconst cakeReducer = ( state = initialState, action) =>{\n    switch(action.type)\n    {\n        case BUY_CAKE:\n            return {\n                ...state,\n                                         \t\t\t\t//modified\n                numberOfCakes : state.numberOfCakes - action.payload\n            }\n\n         default:\n             return state   \n    }\n\n}\n\n```\n\n## Conditional state & dispatch fn\n\n- Based on the props passed you return different state variable or dispatch fn using mapStateToProps & mapDispatchToProps.\n\n- If the component only has dispatch functionality,\n\tyou can pass ``null`` as first parameter in connect.\n   ```js\n    connect(null,mapDispatchToProps) (Component)\n\t```       \n ## API Call in react\n \n```js\nimport React,{useEffect} from 'react'\nimport { fetchUsers } from '../redux/users/UserActions';\nimport { connect } from 'react-redux';\n\nfunction UserContainers({user,fetchUserList}) {\n      useEffect(()=> fetchUserList()\n      , [])\n\n  \n    return user.loading?<h2>User is loading</h2>: (\n        <div>\n            Users\n         {user && user.users && user.users.map(\n             user =>{\n                 return(\n                 <div key={user.id}>{user.name}</div>\n                 )\n             }\n         )}   \n        </div>\n    )\n}\n\nconst mapStateToProps = state =>{\n    return {user: state.user}\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return {fetchUserList : ()=>dispatch(fetchUsers()) }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps) (UserContainers)\n\n```\n    ","tags":[],"folderPathname":"/","data":{},"createdAt":"2020-08-31T13:59:19.352Z","updatedAt":"2020-09-03T03:03:14.353Z","trashed":false,"_rev":"mXho35sm5"}