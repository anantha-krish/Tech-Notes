{"_id":"note:HYCNd0QhI","title":"Redux Notes","content":"# Basic Redux Notes \n#### Author: Anantha Krishnan M \nFollowing are the notes for redux using Nodejs\nStart npm project\n-\n```\nnpm init\n```\n\nInstall redux\n---\n```\nnpm add redux\n```\nThree concepts of redux\n-\n1. Store : holds the state of ur action\n2. Action : describe the change in state of app\n3. Reducers: carries out state transition depending on action\n\nRedux pattern\n-\nThe application can't update state directly.\n1. You have to dispatch an action (action contains the type)\n2. The action will be processed by reducer to update store.\n3. Update in the state is reflected to app as its subscribed. \n![](image-keee20c5.png)\n\nActions\n--\n- json must contain a type key (field), and any no of fields u can add\n\n```js\nconst BUY_CAKE='BUY_CAKE'\n//function is called action creator\nfunction buyCake()\n{\n  return {\n      type:BUY_CAKE,\n      info:'First action for redux'\n  }\n}\n```\nReducers\n--\nReducer accepts the prevState & action -> return state variable based on action \n```js\nconst initialState =\n{\n    numberOfCakes:10\n}\n\nconst reducers = ( state = initialState, action)=>{\n  switch(action.type){\n //returning a new state object not mutating existing one\n  case BUY_CAKE:return{\n     //convention to make the copy of state & then modify the key \n      ...state,\n      numberOfCakes: state.numberOfCakes - 1\n  }\n  default: return state  \n}\n}\n```\nStore\n--\n + step 1:\n Import redux library. Below is example for nodejs app\n```js\nconst redux = require('redux')\nconst createStore = redux.createStore\n``` \n+ step 2: \n  create a store\n```js\nconst store = createStore(reducers)\n```\n+ step 3: access the state using get state\n```js\nconsole.log('Initial State',store.getState())\n```\n+ step 4: subscribe the app to the store \n```js\nconst unsubscribe = \n    store.subscribe( ()=> console.log('update state', store.getState() ))\n```\n+ step 5: dispatch actions to the store\n```js\nstore.dispatch(buyCake())\nstore.dispatch(buyCake())\nstore.dispatch(buyCake())\n```\n+ step 6: unsubscribe the app\n```js\n//unsubscribe is variable declared in step 4\nunsubscribe()\n```\n\n### OUTPUT \n```\nPS D:\\ReactProjects\\redux-demo> node index.js\nInitial State { numberOfCakes: 10 }\nupdate state { numberOfCakes: 9 }\nupdate state { numberOfCakes: 8 }\nupdate state { numberOfCakes: 7 }\n```\nCombine Reducers\n--\nStep1: Create multiple initial states\n\n```js\nconst initialCakeState =\n{\n    numberOfCakes:10\n}\n\nconst initialIceCreamState =\n{\n    numberOfIcecreams:20\n}\n```\n\nStep2: Create different reducers accepting different initial state\n\nStep3: use combineReducer\n```js\n//import stmnt\nconst combineReducers = redux.combineReducers\n\n//implementation\nconst rootReducer = combineReducers({\n  //define key pair\n  cake: cakeReducers,\n  iceCream: iceCreamReducers \n})\nconst store = createStore(rootReducer)\n```\n\n//sample code\n\n```js\nconsole.log('Initial State',store.getState())\nconst unsubscribe = store.subscribe(\n    ()=>console.log('update state',store.getState()))\nstore.dispatch(buyCake())\nstore.dispatch(buyCake())\nstore.dispatch(buyCake())\n//calling second action\nstore.dispatch(buyIceCream())\nstore.dispatch(buyIceCream())\nunsubscribe()\n```\n//output\n\n```js\nPS D:\\ReactProjects\\redux-demo> node index.js\nInitial State { cake: { numberOfCakes: 10 }, iceCream: { numberOfIcecreams: 20 } }\nupdate state { cake: { numberOfCakes: 9 }, iceCream: { numberOfIcecreams: 20 } }  \nupdate state { cake: { numberOfCakes: 8 }, iceCream: { numberOfIcecreams: 20 } }  \nupdate state { cake: { numberOfCakes: 7 }, iceCream: { numberOfIcecreams: 20 } }\nupdate state { cake: { numberOfCakes: 7 }, iceCream: { numberOfIcecreams: 19 } }\nupdate state { cake: { numberOfCakes: 7 }, iceCream: { numberOfIcecreams: 18 } }\n```\nUsing Middlewares in Redux\n--\nExample: redux-logger\n\n1. Install Redux-logger\n\n```js\nnpm add redux-logger\n```\n\n2. Import Statements\n```js\nconst reduxLogger = require('redux-logger')\nconst logger = reduxLogger.createLogger()\nconst applyMiddleWare = redux.applyMiddleware\n```\n3. modify the code \n```js\n//use applyMiddleware in store\nconst store = createStore(rootReducer,applyMiddleWare(logger))\nconsole.log('Initial State',store.getState())\nconst unsubscribe = store.subscribe(()=>{})\nstore.dispatch(buyCake())\nstore.dispatch(buyCake())\nstore.dispatch(buyCake())\nstore.dispatch(buyIceCream())\nstore.dispatch(buyIceCream())\nunsubscribe()\n```\n\\\\output\n\n```\nPS D:\\ReactProjects\\redux-demo> node index.js\nInitial State { cake: { numberOfCakes: 10 }, iceCream: { numberOfIcecreams: 20 } }\n action BUY_CAKE @ 16:12:09.589\n   prev state { cake: { numberOfCakes: 10 }, iceCream: { numberOfIcecreams: 20 } }\n   action     { type: 'BUY_CAKE', info: 'First action for redux' }\n   next state { cake: { numberOfCakes: 9 }, iceCream: { numberOfIcecreams: 20 } }\n action BUY_CAKE @ 16:12:09.614\n   prev state { cake: { numberOfCakes: 9 }, iceCream: { numberOfIcecreams: 20 } }\n   action     { type: 'BUY_CAKE', info: 'First action for redux' }\n   next state { cake: { numberOfCakes: 8 }, iceCream: { numberOfIcecreams: 20 } }\n action BUY_CAKE @ 16:12:09.619\n   prev state { cake: { numberOfCakes: 8 }, iceCream: { numberOfIcecreams: 20 } }\n   action     { type: 'BUY_CAKE', info: 'First action for redux' }\n   next state { cake: { numberOfCakes: 7 }, iceCream: { numberOfIcecreams: 20 } }\n action BUY_ICECREAM @ 16:12:09.624\n   prev state { cake: { numberOfCakes: 7 }, iceCream: { numberOfIcecreams: 20 } }\n   action     { type: 'BUY_ICECREAM', info: 'Second action for redux' }\n   next state { cake: { numberOfCakes: 7 }, iceCream: { numberOfIcecreams: 19 } }\n action BUY_ICECREAM @ 16:12:09.655\n   prev state { cake: { numberOfCakes: 7 }, iceCream: { numberOfIcecreams: 19 } }\n   action     { type: 'BUY_ICECREAM', info: 'Second action for redux' }\n   next state { cake: { numberOfCakes: 7 }, iceCream: { numberOfIcecreams: 18 } }\n```\nSetting up for async calls\n--\n\n```js\nconst redux = require('redux')\nconst createStore = redux.createStore\nconst applyMiddleWare = redux.applyMiddleware\n\nconst initialState ={\n    loading:true,\n    users:[],\n    errors:''\n}\n\nconst FETCH_USERS_LIST = 'FETCH_USERS_LIST'\nconst FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'\nconst FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE'\n\nconst fetchUserList = () =>{\n    return {\n       type: FETCH_USERS_LIST\n    }\n}\n\nconst fetchUserSuccess = (users) =>{\n    return {\n      type: FETCH_USERS_SUCCESS,\n      payload: users\n    }\n}\n\nconst fetchUserFailure = (error) =>{\n    return {\n      type: FETCH_USERS_FAILURE,\n      payload: error\n    }\n}\n\n\nconst reducers = (state = initialState,action) =>{\n    switch (action.type)\n    {\n    case FETCH_USERS_LIST:\n    return{\n        ...state,\n        loading:true,\n    } \n    case FETCH_USERS_SUCCESS:\n        return{\n            ...state,\n            loading:false,\n            users: action.payload\n        } \n\n        case FETCH_USERS_FAILURE:\n            return{\n                ...state,\n                loading:false,\n                error: action.payload\n            }    \n\n        default:\n        return state\n   }\n\n}\n\nconst store = createStore(reducers);\n```\n\nAPI call & Redux Thunk\n--\n\nStep1 : add axios & thunk\n```js\nnpm add axios redux-thunk\n```\n\n\nStep2 : Import the libraries\n```js\nconst thunkMiddleWare = require('redux-thunk').default\nconst axios = require('axios')\n```\nStep3 : Add below code\n\n```js\n//action creater with thunk middleware support\nconst fetchUsers=() =>{\n    // bcoz of thunk middleware it expects a function not a json\n    return function(dispatch)  // argument is dispatch\n    \n    {    // set the initial Loading state \n         dispatch(fetchUserList())\n          // fetch dummy data from json placeholder\n         axios.get('https://jsonplaceholder.typicode.com/users')\n         .then( (res) => \n         { let users = res.data.map(user => user.id)\n            //if response successful proceed to success  \n           dispatch(fetchUserSuccess(users))}\n         )\n         .catch((err) => \n            //if error proceed to failure    \n        dispatch(fetchUserFailure(err.message)))\n    }\n}\n//use thunk middleware\nconst store = createStore(reducers,applyMiddleWare(thunkMiddleWare));\nconst unsubscribe = store.subscribe(()=> { console.log(store.getState())})\n//start the fetch user process\nstore.dispatch(fetchUsers())\n\n```\n### // Output\n```\nPS D:\\ReactProjects\\redux-demo> node async\n{ loading: true, users: [], errors: '' }\n{\n  loading: false,\n  users: [\n    1, 2, 3, 4,  5,\n    6, 7, 8, 9, 10\n  ],\n  errors: ''\n}\nPS D:\\ReactProjects\\redux-demo> node async\n{ loading: true, users: [], errors: '' }\n{\n  loading: false,\n  users: [],\n  errors: 'getaddrinfo ENOTFOUND jsonplaceholder.typicode.cm'\n}\n```\n\n\n","tags":[],"folderPathname":"/","data":{},"createdAt":"2020-08-28T14:57:08.709Z","updatedAt":"2020-08-29T14:41:45.545Z","trashed":false,"_rev":"iDb58LSxe"}