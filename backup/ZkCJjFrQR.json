{"_id":"note:ZkCJjFrQR","title":"Algorithm Notes","content":"\n## 1. Count 'n' natural numbers\n\nUse mathematical formula instead of adding one by one in loop\n```js\n//Complexity: O(1)\nfunction sumOfNum(num)\n{\n    return ((num*(num+1))/2)\n}\n```\n\n## 2. Recursion\n\nRecursive solution should have 2 requirements\n- Should have base condition (a condition where it stops)\n- Should process different Input set on each call\n\n\n### Factorial\n #### Iterative Way\n```js\nfunction factorialIterative(num){\n    var fact=1;\n    for(var i = 1; i<= num; i++)\n    {\n        fact*=i;\n    }\n\n    return fact;\n}\nfactorialIterative(4)\n```\n #### Recursive Way\n```js\nfunction factorialRecursive(num)\n{\n    if(num===1) return 1;\n    return num * factorialRecursive(num-1)\n}\n\nfactorialRecursive(4)\n```\n\n### Collect Odd items in Array\nUsing Helper function\n\n```js\nfunction collectOddValues(arr){\n\n    let result =[];\n       // helper function\n    function helperCollectOdd(subarr)\n    {\n        if(subarr.length ===0 )\n        {\n            return;\n        }\n\n        else if( subarr[0] % 2 === 1)\n         {\n            result.push(subarr[0]);  \n        }\n        \n        helperCollectOdd(subarr.slice(1)) //process remaining element except first element\n    }\n\n    helperCollectOdd(arr)\n\n    return result;\n}\n\ncollectOddValues([1,2,3,4,5,6,7])\n```\n\n### fibonacci series\n\n```js\nfunction fib(n){\n    if (n <= 2) return 1;\n    return fib(n-1) + fib(n-2);\n}\n```\n\n### product of Array\n\n```js\n\nfunction productofArray(arr)\n{\n    if(arr.length === 0) return 1;\n    \n    return arr[0] * productofArray(arr.slice(1))\n}\n\nproductofArray([1,2,3,10])\n```\n\n\n### Flatten Array\n\n```js\n\nfunction flatten(oldArr)\n{\n  let newArr= []\n  \n   for(var i =0; i < oldArr.length ; i++)\n   {\n     if(Array.isArray(oldArr[i]))\n     {\n       newArr = newArr.concat(flatten(oldArr[i]))\n     }\n\n     else\n     {\n       newArr.push(oldArr[i])\n     }\n   }\n\n  return newArr\n}\n\n// Example\nflatten([1, [2, [3, 4], [[5,6],7]]])\n// O/p -> [1, 2, 3, 4, 5, 6, 7]\n```","tags":[],"folderPathname":"/Algorithms","data":{},"createdAt":"2020-10-13T13:01:44.782Z","updatedAt":"2020-10-18T13:43:51.257Z","trashed":false,"_rev":"S-NGBNCcP"}