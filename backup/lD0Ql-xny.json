{"_id":"note:lD0Ql-xny","title":"JS Notes","content":"## Modularisation\n\nalways use IIFE for modularistion\n\nexample\n```js\nvar uiController = (function(){\n    //code\n})();\n\nvar dataController = (function(){\n    //code\n})();\n```\n\n## Event Listeners\n\n```js\n   var addItem = function()\n   {\n       console.log('It works')\n   }\n  // mouse clicks\n  document.querySelector('.add__btn').addEventListener('click',addItem)\n    \n// keyboard events , event is passed by browser either use e or event\n   document.addEventListener('keypress', function(event){\n       if(event.key === \"Enter\"|| event.code ===\"Enter\")\n       {\n           addItem();\n       }\n   })\n```\n## Capture the value of text/dropdown\n\n```js\n getInput: function () {\n      return {\n        type: document.querySelector(DOMStrings.inputType).value,\n        description: document.querySelector(DOMStrings.inputDesc).value,\n        value: document.querySelector(DOMStrings.inputValue).value,\n      };\n    }\n```\n\n## InsertAdjacentHtml\n\nused when we need to put html before or after, or as a sibiling.\n```js\n\n element = DOMStrings.expensesContainer;\n            html=    '<div class=\"item clearfix\" id=\"expense-%id%\">'\n                    + '<div class=\"item__description\">%description%</div>'\n                    + '<div class=\"right clearfix\"><div class=\"item__value\">- %value%</div>'\n                    + '<div class=\"item__percentage\">21%</div>'\n                    + '<div class=\"item__delete\">'\n                    + '<button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button>'\n                    + '</div></div></div>'\n        }  \n        // placeholder variable are give %id% to quickly detect\n        newHtml = html.replace('%id%',obj.id); \n        //update newHtml for other variables    \n        newHtml = newHtml.replace('%description%',obj.description);   \n        newHtml = newHtml.replace('%value%',obj.value);\n        //insertAdjacentHTML(position,modified html)   \n        document.querySelector(element).insertAdjacentHTML(\"beforeend\",newHtml)\n```\n## QuerySelectorAll\n\nPass a list of class seperated by comma, returns a list\n\nUse Array.prototype.slice to convert list to array\n\n```js\n var fieldsList, fieldsArr;\n\n        fieldsList = document.querySelectorAll(DOMStrings.inputDesc +', ' + DOMStrings.inputValue);\n         \n        //convert list to array using prototype of array\n        fieldsArr = Array.prototype.slice.call(fieldsList);\n        \n        // below is the shortcut for clearing all the fields\n        fieldsArr.forEach( function(field)\n        {\n            field.value = \"\";\n        })\n\n        fieldsArr[0].focus();\n\n```\n\n## Event Delegation\n\n- used when we lots of child target elements\n- used when there are items that will be in dom in future\n\n```js\n var ctrlDelItem = function(event){\n\n     var itemID,type,ID,splitResult;\n     //event bubbling\n     itemID = event.target.parentNode.parentNode.parentNode.parentNode.id;\n\n    if(itemID)\n    {\n     splitResult = itemID.split('-');\n     type = splitResult[0];\n     ID = splitResult[1];\n     console.log(type,ID)\n    }\n    \n  }\n```\n\n## Removing an element\n- we can only remove child, we cannot delete element by itself\n\n```js\n   removeListItem:function(id){\n\n      var el;\n      el = document.getElementById(id);\n      el.parentNode.removeChild(el);\n\n    }\n```\n","tags":[],"folderPathname":"/","data":{},"createdAt":"2020-10-10T12:26:22.291Z","updatedAt":"2020-10-12T13:16:22.827Z","trashed":false,"_rev":"AO6crXeUk"}